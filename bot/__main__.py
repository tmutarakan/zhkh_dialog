from aiogram import Bot, Dispatcher
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import CallbackQuery, Message
from aiogram_dialog import Dialog, DialogManager, StartMode, Window, setup_dialogs
from aiogram_dialog.widgets.text import Const
from aiogram_dialog.widgets.kbd import Button, ScrollingGroup
from environs import Env


env = Env()
env.read_env()

BOT_TOKEN = env('BOT_TOKEN')

bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()


class StartSG(StatesGroup):
    start = State()


class ServiceCategoryDialogSG(StatesGroup):
    first_page = State()
    second_page = State()
    third_page = State()
    fourth_page = State()


async def go_back(callback: CallbackQuery, button: Button, dialog_manager: DialogManager):
    await dialog_manager.back()


async def go_next(callback: CallbackQuery, button: Button, dialog_manager: DialogManager):
    await dialog_manager.next()


async def button_clicked(callback: CallbackQuery, button: Button, manager: DialogManager):
    await callback.message.answer('–ö–∞–∂–µ—Ç—Å—è, —Ç—ã –Ω–∞–∂–∞–ª –Ω–∞ –∫–Ω–æ–ø–∫—É!')


async def start_service_category(callback: CallbackQuery, button: Button, dialog_manager: DialogManager):
    await dialog_manager.start(state=ServiceCategoryDialogSG.first_page)


def get_categories():
    return [
        "–ö—Ä—ã—à–∞ –∏ –≤–æ–¥–æ—Å—Ç–æ—á–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞",
        "–ß–µ—Ä–¥–∞–∫",
        "–ü–æ–¥—ä–µ–∑–¥",
        "–õ–∏—Ñ—Ç",
        "–•–æ–ª–æ–¥–Ω–æ–µ –≤–æ–¥–æ—Å–Ω–∞–±–∂–µ–Ω–∏–µ",
        "–ì–æ—Ä—è—á–µ–µ –≤–æ–¥–æ—Å–Ω–∞–±–∂–µ–Ω–∏–µ",
        "–≠–ª–µ–∫—Ç—Ä–æ—Å–Ω–∞–±–∂–µ–Ω–∏–µ",
        "–ü–æ–¥–≤–∞–ª",
        "–§–∞—Å–∞–¥",
        "–ú—É—Å–æ—Ä",
        "–ú—É—Å–æ—Ä–æ–ø—Ä–æ–≤–æ–¥",
        "–î–æ–º–æ—Ñ–æ–Ω",
        "–û—Ç–æ–ø–ª–µ–Ω–∏–µ",
        "–ë–ª–∞–≥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ",
        "–í–µ–Ω—Ç–∏–ª—è—Ü–∏—è",
        "–î–≤–æ—Ä",
        "–î–µ—Ä–∞—Ç–∏–∑–∞—Ü–∏—è",
        "–°–∞–Ω–∏—Ç–∞—Ä–Ω–∞—è —É–±–æ—Ä–∫–∞",
        "–ü—Ä–µ—Ç–µ–Ω–∑–∏–∏ –∫ —É–ø—Ä–∞–≤–ª—è—é—â–µ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏",
        "–≠–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–∞—è –ø–ª–∏—Ç–∞",
        "–ì–∞–∑–æ—Å–Ω–∞–±–∂–µ–Ω–∏–µ",
    ]


def test_buttons_creator(btn_quantity):
    buttons = []
    for i, item in enumerate(btn_quantity):
        buttons.append(Button(Const(item), id=f"{i}"))
    return buttons


async def some_getter(**kwargs):  # –ó–¥–µ—Å—å –±—É–¥–µ–º —Å–æ–∑–¥–∞–≤–∞—Ç—å –Ω—É–∂–Ω—ã–µ –≥–µ—Ç—Ç–µ—Ä—ã
    pass


# –≠—Ç–æ —Å—Ç–∞—Ä—Ç–æ–≤—ã–π –¥–∏–∞–ª–æ–≥
start_dialog = Dialog(
    Window(
        Const("üì±–î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏ —Å–ª–µ–¥—É–π—Ç–µ —É–∫–∞–∑–∞–Ω–∏—è–º –±–æ—Ç–∞."),
        Button(
            text=Const('–û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É'),
            id='button_submit_application',
            on_click=start_service_category),
        state=StartSG.start
    ),
)


service_category_dialog = Dialog(
    Window(
        Const(text='–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:'),
        ScrollingGroup(
            *test_buttons_creator(get_categories()),
            id="numbers",
            width=1,
            height=6,
        ),
        state=ServiceCategoryDialogSG.first_page,
    ),
)


# –≠—Ç–æ—Ç –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ –∫–æ–º–∞–Ω–¥—É /start
@dp.message(CommandStart())
async def command_start_process(message: Message, dialog_manager: DialogManager):
    await dialog_manager.start(state=StartSG.start, mode=StartMode.RESET_STACK)


if __name__ == '__main__':
    dp.include_routers(start_dialog, service_category_dialog)
    setup_dialogs(dp)
    dp.run_polling(bot)
